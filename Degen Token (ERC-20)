// SPDX-License-Identifier: MIT


pragma solidity ^0.8.0;

contract DegenToken {
    mapping (address => uint256) public balances;

    mapping (address => mapping (address => uint256)) public allowances;

    mapping (address => uint256) public totalSupply;

    address public owner;

    string public constant name = "Degen";

    string public constant symbol = "DGN";

    uint8 public constant decimals = 18;

    uint256 public totalSupplyInitial;

    event Transfer(address indexed from, address indexed to, uint256 value);

    event Mint(address indexed to, uint256 value);

    event Burn(address indexed from, uint256 value);

    event Approval(address indexed owner, address indexed spender, uint256 value);

    event ApprovalRevoked(address indexed owner, address indexed spender);

    modifier onlyOwner {
        require(msg.sender == owner, "Only the owner can perform this action");
        _;
    }

    constructor() {
        owner = msg.sender;
        totalSupplyInitial = 100000000 * (10 ** decimals);
        totalSupply[owner] = totalSupplyInitial;
        balances[owner] = totalSupplyInitial;
        emit Mint(owner, totalSupplyInitial);
    }

    function mint(address to, uint256 amount) public onlyOwner {
        require(amount > 0, "Amount must be greater than 0");
        require(balances[to] + amount <= totalSupplyInitial, "Amount exceeds the total supply");
        balances[to] += amount;
        totalSupply[to] += amount;
        emit Mint(to, amount);
        emit Transfer(address(0), to, amount);
    }

    function transfer(address to, uint256 amount) public {
        require(amount > 0, "Amount must be greater than 0");
        require(balances[msg.sender] >= amount, "Insufficient balance");
        balances[msg.sender] -= amount;
        balances[to] += amount;
        emit Transfer(msg.sender, to, amount);
    }

    function balanceOf(address who) public view returns (uint256) {
        return balances[who];
    }

    function transferFrom(address from, address to, uint256 amount) public {
        require(amount > 0, "Amount must be greater than 0");
        require(balances[from] >= amount, "Insufficient balance");
        require(allowances[from][msg.sender] >= amount, "Insufficient allowance");
        balances[from] -= amount;
        balances[to] += amount;
        allowances[from][msg.sender] -= amount;
        emit Transfer(from, to, amount);
    }

    function approve(address spender, uint256 amount) public {
        require(amount > 0, "Amount must be greater than 0");
        allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
    }

    function increaseAllowance(address spender, uint256 addedValue) public {
        require(addedValue > 0, "Amount must be greater than 0");
        allowances[msg.sender][spender] += addedValue;
        emit Approval(msg.sender, spender, allowances[msg.sender][spender]);
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public {
        require(subtractedValue > 0, "Amount must be greater than 0");
        allowances[msg.sender][spender] -= subtractedValue;
        if (allowances[msg.sender][spender] < 0) {
            allowances[msg.sender][spender] = 0;
        }
        emit Approval(msg.sender, spender, allowances[msg.sender][spender]);
    }

    function burn(uint256 value) public {
        require(value > 0, "Amount must be greater than 0");
        require(balances[msg.sender] >= value, "Insufficient balance");
        balances[msg.sender] -= value;
        totalSupply[msg.sender] -= value;
        emit Burn(msg.sender, value);
    }
}
